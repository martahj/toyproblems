/*
  Instructions

Given an n x n array, return the array elements arranged from outermost elements to the middle element, traveling clockwise.

NOTE: The idea is not sort the elements from the lowest value to the highest; the idea is to traverse the 2-d array in a clockwise snailshell pattern.

NOTE 2: The 0x0 (empty matrix) is represented as [[]]
*/

/*
  Code
*/

snail = function(array) {

  let arrayOfArrays = Array.isArray(array) && array.map( arr => Array.isArray(arr) )
                                                   .reduce( (allArrs, current) => allArrs && current, true)
  
  //validate input
  if (!arrayOfArrays){
    throw Error;
  }

  let top = array[0];
  
  //check if we're done
  if (top.length === 0) {
    return top;
  }
  
  //otherwise, need to keep going
  
  let bottom = array.length > 1 ? (array[array.length-1]).reverse() : [];
  
  let middle = array.slice(1, array.length-1);
  let left = middle.map( arr => arr[0] ).reverse();
  let right = middle.map( arr => arr.length > 1 ? arr[arr.length-1] : null)
                    .filter( elem => !!elem );
  let remaining = middle.map( arr => arr.slice(1, arr.length-1) );
  
  return [...top, ...right, ...bottom, ...left].concat(remaining.length ? snail(remaining) : remaining);
  
}
